{"name":"Scheduler","tagline":"","body":"# Scheduler Module\r\n\r\nIt has 3 porpuses:\r\n\r\n1. Start using github and contribute to open source.\r\n2. Learn how to publish something to npm. (TODO)\r\n3. Become something usefull?. (TODO)\r\n\r\nEssentially it's a queue where you can push functions to be processed\r\nat a certain interval. Actually the functions are  not called periodically\r\nbut you can enqueue many functions and they will be executed in order at a\r\ncertain rate.\r\n\r\n## Usage:\r\n  ```javascript\r\n  scheduler = new Scheduler(1000); //call functions every 1sec\r\n  scheduler.enqueue(function(){\r\n    console.log(new Date());\r\n  });\r\n  scheduler.enqueue(function(){\r\n    console.log(new Date());\r\n  }); \r\n  //Now with arguments\r\n  scheduler.enqueue([\r\n   function(arg1,arg2){\r\n     console.log('First argument is:' + arg1);\r\n     console.log('Second argument is:' + arg2);\r\n   },\r\n   2,'hi!'])\r\n  scheduler.start()\r\n  ```\r\n\r\n## Use cases\r\n\r\n#### External API Rate Limit\r\n\r\nImagine you must use a certain API for many things, but the limit is imposed\r\nto the whole API, not just per endpoint.\r\n\r\n* Rate limit is 1 call/sec\r\n\r\n```javascript\r\nvar scheduler = new Scheduler(1000); // 1 call each 1000ms\r\nvar api_manager = new RestrictedApiManager({user:'me',pass:'secret');\r\n\r\n//This could be rate limited\r\napi_manager.getData(function(data){\r\n  console.log(\"Data is\": data);\r\n});\r\napi_manager.getMoreData(function(data2){\r\n  console.log(\"Data is\": data2);\r\n});\r\napi_manager.getOtherData(function(data3){\r\n  console.log(\"Data is\": data3);\r\n});\r\n\r\n//This won't be rate limited but it is awful\r\nvar rate_limit_delay = 1000;\r\napi_manager.getData(function(data){\r\n  console.log(\"Data is\": data);\r\n  setTimeout(function(){\r\n    api_manager.getMoreData(function(data2){\r\n      console.log(\"Data is\": data2);\r\n      setTimeout( function(){\r\n        api_manager.getOtherData(function(data3){\r\n          console.log(\"Data is\": data3);\r\n        }); //getOtherData\r\n      },rate_limit_delay);\r\n    }); //getMoreData\r\n  },rate_limit_delay);\r\n}); //getData\r\n\r\n//This looks better\r\nvar scheduler = new Scheduler(1000); // 1 call per 1000ms\r\nscheduler.start();\r\nprintData = function(data){\r\n  console.log(\"Data is:\");\r\n  console.log(data);\r\n  \r\n}\r\nscheduler.enqueue(api_manager.getData,printData);\r\nscheduler.enqueue(api_manager.getMoreData,printData);\r\nscheduler.enqueue(api_manager.getOtherData,printData);\r\n\r\n```\r\n\r\n### TODO\r\n\r\nThis is just the first structure.\r\n\r\n1. Tests\r\n2. Validations. What happens if you enqueue something that is not a function?\r\n3. Error handling. What happens if your function crashes?\r\n4. Functinality to get statistics:\r\n  1. When will a function be executed?\r\n  2. How many elements are in the queue?\r\n5. More funcionalities\r\n  1. Priorities\r\n  2. Remove enqueued function\r\n  3. Change execution interval\r\n  3. Change execution interval\r\n6. NPM publish\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}